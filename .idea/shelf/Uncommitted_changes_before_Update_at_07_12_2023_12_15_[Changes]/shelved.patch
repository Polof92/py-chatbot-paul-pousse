Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nimport math\r\n\r\nprint('Patientez...')\r\ndef list_of_files(directory, extension):\r\n    files_names = []\r\n    for filename in os.listdir(directory):\r\n        if filename.endswith(extension):\r\n            files_names.append(filename)\r\n    return files_names\r\n# donne le nom des fichiers qui sont dans speeches\r\n\r\ndirectory = \"./speeches\"\r\nfiles_names = list_of_files(directory, \"txt\")\r\n#appel de la fonction\r\n\r\ndef nom_president():\r\n    a = files_names\r\n    for i in range(len(a)):\r\n        a[i] = a[i][11:len(a[i])-4]\r\n        if a[i][len(a[i])-1] == '1' or a[i][len(a[i])-1] == '2':\r\n            a[i] = a[i][:len(a[i])-1]\r\n    return a\r\ntab = nom_president()\r\n#créer une liste avec le nom des présidents\r\n\r\n\r\ndef prenom(a):\r\n    for i in range(len(a)):\r\n        if a[i] == \"Chirac\":\r\n            a[i] = \"Jacques\"\r\n        if a[i] == \"Giscard dEstaing\":\r\n            a[i] = \"Valérie\"\r\n        if a[i] == \"Hollande\":\r\n            a[i] = \"FrançoisH\"\r\n        if a[i] == \"Macron\":\r\n            a[i] = \"Emmanuel\"\r\n        if a[i] == \"Mitterrand\":\r\n            a[i] = \"FrançoisM\"\r\n        if a[i] == \"Sarkozy\":\r\n            a[i] = \"Nicolas\"\r\n#remplace leurs noms par leurs prénoms en elevant les doublons\r\n\r\ndef convertir(f, f2):\r\n    with open(f, \"r\",) as f3, open(f2, \"w\") as f4:\r\n        c = f3.readlines()\r\n        for i in range(len(c)):\r\n            a = \"\"\r\n            for j in range(len(c[i])):\r\n                if (ord(c[i][j]) > 64) and (ord(c[i][j]) < 91):\r\n                    a += chr(ord(c[i][j])+32)\r\n                else:\r\n                    a += c[i][j]\r\n            f4.write(a)\r\n    return f4\r\n#copie le texte dans un autre fichier en elevant les majuscules\r\n\r\ndef fichier():\r\n    a=os.listdir(\"./speeches\")\r\n    b=[]\r\n    for i in range(len(a)):\r\n        c=\"Cleaned_\"\r\n        for j in range(11,len(a[i])):\r\n            c+=a[i][j]\r\n        b.append(c)\r\n    return b\r\n#créer une liste avec le nom des fchiers qu'on a créé\r\n\r\ndef del_pon(f):\r\n    with (open(f, \"r\") as f3):\r\n        c = f3.readlines()\r\n        with open(f, \"w\") as f3:\r\n            a = \"\"\r\n            for i in range(len(c)):\r\n                for j in range(len(c[i])):\r\n                    if (c[i][j] == ',') or (c[i][j] == '.') or (c[i][j] == '!') or (c[i][j] == '-') or (c[i][j] == ':') or (c[i][j] == ';') :\r\n                        a += ''\r\n                    elif (c[i][j] == ',') or (c[i][j] == chr(39)):\r\n                        a += ' '\r\n                    else:\r\n                        a += c[i][j]\r\n            f3.write(a)\r\n    return f3\r\n#enlève la ponctuation\r\n\r\ndef creation():\r\n    a=fichier()\r\n    c=os.listdir(\"./speeches\")\r\n    for i in range(len(a)):\r\n        b=\"./cleaned/\"+a[i]\r\n        d=\"./speeches/\"+c[i]\r\n        with open(b,\"w\") as f1:\r\n            convertir(d,b)\r\n            del_pon(b)\r\n# enlève les majuscules\r\n\r\ndef list_of_files2(directory, extension):\r\n    files_names = []\r\n    for filename in os.listdir(directory):\r\n        if filename.endswith(extension):\r\n            files_names.append(filename)\r\n    return files_names\r\n\r\ndirectory = \"./cleaned\"\r\nfiles_names2 = list_of_files2(directory, \"txt\")\r\n\r\n\r\ndef tf(f1):\r\n    with open(f1,\"r\",encoding=\"utf-8\") as f:\r\n        d={}\r\n        a=f.readlines()\r\n        b=[]\r\n        for i in range(len(a)):\r\n            j = 0\r\n            while j<len(a[i]):\r\n                c=\"\"\r\n                while a[i][j]!=\" \" and j<len(a[i])-1:\r\n                    c+=a[i][j]\r\n                    j += 1\r\n                b.append(c)\r\n                j+=1\r\n    for i in range(len(b)):\r\n        if b[i] not in d:\r\n            d[b[i]]=1\r\n        else:\r\n            d[b[i]]+=1\r\n    return d\r\n#calcul le score TF\r\n\r\ndef test_tf():\r\n    a=0\r\n    b=files_names2\r\n    listd=[]\r\n    for i in range(len(files_names2)):\r\n        listd.append(tf(\"./cleaned/\" + files_names2[i]))\r\n    return listd\r\n\r\ndef idf_mot(mot):\r\n    c=0\r\n    a=test_tf()\r\n    for i in range(len(a)):\r\n        if mot in a[i]:\r\n            c+=1\r\n    c=math.log(1/(c/len(a)),10)\r\n    return c\r\ndef idf():\r\n    a=test_tf()\r\n    b=[]\r\n    for i in  range(len(a)):\r\n        for cle in a[i].keys():\r\n            if cle not in b:\r\n                b.append(cle)\r\n    return b\r\ndef idf2():\r\n\r\n    c=[]\r\n    b=idf()\r\n    for i in range(len(b)):\r\n        c.append(idf_mot(b[i]))\r\n    return c\r\n\r\n\r\ndef tf1():\r\n    a=test_tf()\r\n    b=idf()\r\n    c=idf2()\r\n    for i in range(len(b)):\r\n        for j in range(len(a)):\r\n            if b[i] in a[j]:\r\n                a[j][b[i]]=c[i]*a[j][b[i]]\r\n    return a\r\n\r\n\r\ndef matrice():\r\n   a=idf()\r\n   tab=[]\r\n   b=tf1()\r\n   for i in range(len(a)):\r\n       tab.append([])\r\n       for j in range(len(b)):\r\n            if a[i] in b[j]:\r\n                tab[i].append(b[j][a[i]])\r\n            else:\r\n                tab[i].append(0.0)\r\n       tab[i].append(a[i])\r\n   return tab\r\n#créer la matrice contenant tous les scores TF-IDF ainsi que le mot du score\r\n\r\ndef affichage_matrice(tab):\r\n    for i in range(len(tab)):\r\n        print(tab[i])\r\ntab=matrice()\r\n#permet l'affichage de la matrice contenant tous les scores TF-IDF ainsi que le mot du score\r\n\r\ndef fonction_6():\r\n    m = matrice()\r\n    for i in range(len(m)):\r\n        cpt = 0\r\n        for j in range(len(m[i])):\r\n            if (0.0 != m[i][j]) and (m[i][j] != '0.0'):\r\n                cpt = cpt + 1\r\n                if cpt == 8 and (len(m[i][j]) > 1):\r\n                    print(m[i][8], end = ', ')\r\n#affice les mits dit par tous les présidents sauf ceux pas importants\r\ndef mot_pas_important():\r\n    a=matrice()\r\n    b=[]\r\n    for i in range(len(a)):\r\n        s=0\r\n        t=[]\r\n        for j in range(len(a[i])-1):\r\n           if a[i][j]!=0:\r\n               s+=a[i][j]\r\n        if s==0:\r\n            b.append(a[i][j+1])\r\n    return b\r\n#affiche les mots pas importants\r\n\r\ndef mot_plus_important():\r\n    a = matrice()\r\n    b = []\r\n    for i in range(len(a)):\r\n        s = 0\r\n        t = []\r\n        for j in range(len(a[i]) - 1):\r\n            if a[i][j] != 0:\r\n                s += a[i][j]\r\n        if s >=2:\r\n            b.append(a[i][j + 1])\r\n    return b\r\n#affiche les mots les plus importants\r\n\r\ndef fusion(d1,d2):\r\n    f={}\r\n    for cle,valeur in d1.items():\r\n        f[cle]=valeur\r\n    for cle2,valeur2 in d2.items():\r\n        if cle2 in f:\r\n            f[cle2]+=valeur2\r\n        else:\r\n            f[cle2]=valeur\r\n    return f\r\n#fusionne\r\n\r\ndef chirac():\r\n    a=test_tf()\r\n    b=fusion(a[0],a[1])\r\n    ivaleur=0\r\n    icle=0\r\n    for cle,valeur in b.items():\r\n        if valeur>ivaleur:\r\n            ivaleur=valeur\r\n            icle=cle\r\n    return icle\r\ndef nation():\r\n    a=test_tf()\r\n    imax=0\r\n    c=-1\r\n    d=tabpres\r\n    f=[]\r\n    for i in range(len(a)):\r\n        if 'nation' in a[i]:\r\n            f.append(d[i])\r\n    for i in range(len(a)):\r\n        for cle,valeur in a[i].items():\r\n            if 'nation' in a[i] and valeur>imax:\r\n                imax=valeur\r\n                c=i\r\n    return set(f),d[c]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 982409817882781397a53964347412f32aec42e2)
+++ b/main.py	(date 1701947685281)
@@ -21,7 +21,7 @@
         if a[i][len(a[i])-1] == '1' or a[i][len(a[i])-1] == '2':
             a[i] = a[i][:len(a[i])-1]
     return a
-tab = nom_president()
+tabpres = nom_president()
 #créer une liste avec le nom des présidents
 
 
@@ -240,7 +240,7 @@
         else:
             f[cle2]=valeur
     return f
-#fusionne
+#fusionne deux tableau et additionne les clefs doublons
 
 def chirac():
     a=test_tf()
@@ -252,6 +252,7 @@
             ivaleur=valeur
             icle=cle
     return icle
+#renvoie les mots lesplus répétés par Chirac
 def nation():
     a=test_tf()
     imax=0
@@ -267,3 +268,26 @@
                 imax=valeur
                 c=i
     return set(f),d[c]
+#renvoie tous les présidents qui ont parler de nation et celui qui en a parler le plus
+
+def question(q):
+    a = q.split()
+    c = []
+    d = []
+    for i in range(len(a)):
+        b = ''
+        for j in range(len(a[i])):
+            if (a[i][j] != '\'') and (a[i][j] != ',') and (a[i][j] != ':' and (a[i][j] != '!')) and a[i][j] != '?':
+                b += a[i][j]
+            else:
+                b+= ' '
+        c.append(b)
+    for i in range(len(c)):
+        b = ''
+        for j in range(len(c[i])):
+            if ord(c[i][j]) <= 90 and ord(c[i][j]) >= 65:
+                b += chr(ord(c[i][j]) + 32)
+            else:
+                b += c[i][j]
+        d.append(b)
+    return d
Index: .idea/shelf/Uncommitted_changes_before_Update_at_24_11_2023_09_06__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_24_11_2023_09_06__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_24_11_2023_09_06__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_24_11_2023_09_06__Changes_.xml	(revision 982409817882781397a53964347412f32aec42e2)
+++ /dev/null	(revision 982409817882781397a53964347412f32aec42e2)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_24_11_2023_09_06_[Changes]" date="1700813226625" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_24_11_2023_09_06_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 24/11/2023 09:06 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_24_11_2023_09_06_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_24_11_2023_09_06_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_24_11_2023_09_06_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_24_11_2023_09_06_[Changes]/shelved.patch	(revision 982409817882781397a53964347412f32aec42e2)
+++ /dev/null	(revision 982409817882781397a53964347412f32aec42e2)
@@ -1,37 +0,0 @@
-Index: main.py
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import os\r\nimport math\r\n\r\ndef list_of_files(directory, extension):\r\n    files_names = []\r\n    for filename in os.listdir(directory):\r\n        if filename.endswith(extension):\r\n            files_names.append(filename)\r\n    return files_names\r\n# donne le nom des fichiers qui sont dans speeches\r\n\r\ndirectory = \"./speeches\"\r\nfiles_names = list_of_files(directory, \"txt\")\r\nprint(files_names)\r\n#appel de la fonction \r\n\r\ndef nom_president():\r\n    a = files_names\r\n    for i in range(len(a)):\r\n        a[i] = a[i][11:len(a[i])-4]\r\n        if a[i][len(a[i])-1] == '1' or a[i][len(a[i])-1] == '2':\r\n            a[i] = a[i][:len(a[i])-1]\r\n    return a\r\ntab = nom_president()\r\nprint(tab)\r\n#créer une liste avec le nom des présidents \r\n\r\n\r\ndef prenom(a):\r\n    for i in range(len(a)):\r\n        if a[i] == \"Chirac\":\r\n            a[i] = \"Jacques\"\r\n        if a[i] == \"Giscard dEstaing\":\r\n            a[i] = \"Valérie\"\r\n        if a[i] == \"Hollande\":\r\n            a[i] = \"FrançoisH\"\r\n        if a[i] == \"Macron\":\r\n            a[i] = \"Emmanuel\"\r\n        if a[i] == \"Mitterrand\":\r\n            a[i] = \"FrançoisM\"\r\n        if a[i] == \"Sarkozy\":\r\n            a[i] = \"Nicolas\"\r\n    print(set(a))\r\nprenom(tab)\r\n#remplace leurs noms par leurs prénoms en elevant les doublons \r\n\r\ndef convertir(f, f2):\r\n    with open(f, \"r\",) as f3, open(f2, \"w\") as f4:\r\n        c = f3.readlines()\r\n        for i in range(len(c)):\r\n            a = \"\"\r\n            for j in range(len(c[i])):\r\n                if (ord(c[i][j]) > 64) and (ord(c[i][j]) < 91):\r\n                    a += chr(ord(c[i][j])+32)\r\n                else:\r\n                    a += c[i][j]\r\n            f4.write(a)\r\n    return f4\r\n#copie le texte dans un autre fichier en elevant les majuscules\r\n\r\ndef fichier():\r\n    a=os.listdir(\"./speeches\")\r\n    print(a)\r\n    b=[]\r\n    for i in range(len(a)):\r\n        c=\"Cleaned_\"\r\n        for j in range(11,len(a[i])):\r\n            c+=a[i][j]\r\n        b.append(c)\r\n    return b\r\nprint(fichier())\r\n#créer une liste avec le nom des fchiers qu'on a créé\r\n\r\ndef del_pon(f):\r\n    with (open(f, \"r\") as f3):\r\n        c = f3.readlines()\r\n        with open(f, \"w\") as f3:\r\n            a = \"\"\r\n            for i in range(len(c)):\r\n                for j in range(len(c[i])):\r\n                    if (c[i][j] == ',') or (c[i][j] == '.') or (c[i][j] == '!') or (c[i][j] == '-') or (c[i][j] == ':') or (c[i][j] == ';') :\r\n                        a += ''\r\n                    elif (c[i][j] == ',') or (c[i][j] == chr(39)):\r\n                        a += ' '\r\n                    else:\r\n                        a += c[i][j]\r\n            f3.write(a)\r\n    return f3\r\n#enlève la ponctuation\r\n\r\n\r\n\r\ndef creation():\r\n    a=fichier()\r\n    c=os.listdir(\"./speeches\")\r\n    for i in range(len(a)):\r\n        b=\"./cleaned/\"+a[i]\r\n        d=\"./speeches/\"+c[i]\r\n        with open(b,\"w\") as f1:\r\n            convertir(d,b)\r\n            del_pon(b)\r\ncreation()\r\n# enlève les majuscules\r\ndef list_of_files2(directory, extension):\r\n    files_names = []\r\n    for filename in os.listdir(directory):\r\n        if filename.endswith(extension):\r\n            files_names.append(filename)\r\n    return files_names\r\n\r\ndirectory = \"./cleaned\"\r\nfiles_names2 = list_of_files2(directory, \"txt\")\r\nprint (files_names2)\r\n\r\ndef tf(f1):\r\n    with open(f1,\"r\",encoding=\"utf-8\") as f:\r\n        d={}\r\n        a=f.readlines()\r\n        b=[]\r\n        for i in range(len(a)):\r\n            j = 0\r\n            while j<len(a[i]):\r\n                c=\"\"\r\n                while a[i][j]!=\" \" and j<len(a[i])-1:\r\n                    c+=a[i][j]\r\n                    j += 1\r\n                b.append(c)\r\n                j+=1\r\n    for i in range(len(b)):\r\n        if b[i] not in d:\r\n            d[b[i]]=1\r\n        else:\r\n            d[b[i]]+=1\r\n    return d\r\n#calcul le score TF\r\ndef test_tf():\r\n    a=0\r\n    b=files_names2\r\n    listd=[]\r\n    for i in range(len(files_names2)):\r\n        listd.append(tf(\"./cleaned/\" + files_names2[i]))\r\n    return listd\r\nprint(test_tf())\r\ndef idf_mot(mot):\r\n    c=0\r\n    a=test_tf()\r\n    for i in range(len(a)):\r\n        if mot in a[i]:\r\n            c+=1\r\n    c=math.log(1/(c/len(a)),10)\r\n    return c\r\ndef idf():\r\n    a=test_tf()\r\n    b=[]\r\n    for i in  range(len(a)):\r\n        for cle in a[i].keys():\r\n            if cle not in b:\r\n                b.append(cle)\r\n    return b\r\ndef idf2():\r\n\r\n    c=[]\r\n    b=idf()\r\n    for i in range(len(b)):\r\n        c.append(idf_mot(b[i]))\r\n    return c\r\n#print(idf())\r\n\r\ndef tf1():\r\n    a=test_tf()\r\n    b=idf()\r\n    c=idf2()\r\n    print(b)\r\n    print(c)\r\n    for i in range(len(b)):\r\n        for j in range(len(a)):\r\n            if b[i] in a[j]:\r\n                a[j][b[i]]=c[i]*a[j][b[i]]\r\n    return a\r\nprint(tf1())\r\n def aff_matrice
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/main.py b/main.py
---- a/main.py	(revision be6dd79056b9753318a3c779e8ca3d3869b21db6)
-+++ b/main.py	(date 1700812961827)
-@@ -141,6 +141,8 @@
-         listd.append(tf("./cleaned/" + files_names2[i]))
-     return listd
- print(test_tf())
-+#affiche le TF dans une liste
-+
- def idf_mot(mot):
-     c=0
-     a=test_tf()
-@@ -149,6 +151,8 @@
-             c+=1
-     c=math.log(1/(c/len(a)),10)
-     return c
-+#calcul l'IDF de chaques mots
-+
- def idf():
-     a=test_tf()
-     b=[]
-@@ -178,4 +182,6 @@
-                 a[j][b[i]]=c[i]*a[j][b[i]]
-     return a
- print(tf1())
-- def aff_matrice
-\ No newline at end of file
-+#permet de lier chaques mots à son score TF-IDF dans une matrice
-+
-+
