Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nimport math\r\n\r\ndef list_of_files(directory, extension):\r\n    files_names = []\r\n    for filename in os.listdir(directory):\r\n        if filename.endswith(extension):\r\n            files_names.append(filename)\r\n    return files_names\r\n# donne le nom des fichiers qui sont dans speeches\r\n\r\ndirectory = \"./speeches\"\r\nfiles_names = list_of_files(directory, \"txt\")\r\nprint(files_names)\r\n#appel de la fonction \r\n\r\ndef nom_president():\r\n    a = files_names\r\n    for i in range(len(a)):\r\n        a[i] = a[i][11:len(a[i])-4]\r\n        if a[i][len(a[i])-1] == '1' or a[i][len(a[i])-1] == '2':\r\n            a[i] = a[i][:len(a[i])-1]\r\n    return a\r\ntab = nom_president()\r\nprint(tab)\r\n#créer une liste avec le nom des présidents \r\n\r\n\r\ndef prenom(a):\r\n    for i in range(len(a)):\r\n        if a[i] == \"Chirac\":\r\n            a[i] = \"Jacques\"\r\n        if a[i] == \"Giscard dEstaing\":\r\n            a[i] = \"Valérie\"\r\n        if a[i] == \"Hollande\":\r\n            a[i] = \"FrançoisH\"\r\n        if a[i] == \"Macron\":\r\n            a[i] = \"Emmanuel\"\r\n        if a[i] == \"Mitterrand\":\r\n            a[i] = \"FrançoisM\"\r\n        if a[i] == \"Sarkozy\":\r\n            a[i] = \"Nicolas\"\r\n    print(set(a))\r\nprenom(tab)\r\n#remplace leurs noms par leurs prénoms en elevant les doublons \r\n\r\ndef convertir(f, f2):\r\n    with open(f, \"r\",) as f3, open(f2, \"w\") as f4:\r\n        c = f3.readlines()\r\n        for i in range(len(c)):\r\n            a = \"\"\r\n            for j in range(len(c[i])):\r\n                if (ord(c[i][j]) > 64) and (ord(c[i][j]) < 91):\r\n                    a += chr(ord(c[i][j])+32)\r\n                else:\r\n                    a += c[i][j]\r\n            f4.write(a)\r\n    return f4\r\n#copie le texte dans un autre fichier en elevant les majuscules\r\n\r\ndef fichier():\r\n    a=os.listdir(\"./speeches\")\r\n    print(a)\r\n    b=[]\r\n    for i in range(len(a)):\r\n        c=\"Cleaned_\"\r\n        for j in range(11,len(a[i])):\r\n            c+=a[i][j]\r\n        b.append(c)\r\n    return b\r\nprint(fichier())\r\n#créer une liste avec le nom des fchiers qu'on a créé\r\n\r\ndef del_pon(f):\r\n    with (open(f, \"r\") as f3):\r\n        c = f3.readlines()\r\n        with open(f, \"w\") as f3:\r\n            a = \"\"\r\n            for i in range(len(c)):\r\n                for j in range(len(c[i])):\r\n                    if (c[i][j] == ',') or (c[i][j] == '.') or (c[i][j] == '!') or (c[i][j] == '-') or (c[i][j] == ':') or (c[i][j] == ';') :\r\n                        a += ''\r\n                    elif (c[i][j] == ',') or (c[i][j] == chr(39)):\r\n                        a += ' '\r\n                    else:\r\n                        a += c[i][j]\r\n            f3.write(a)\r\n    return f3\r\n#enlève la ponctuation\r\n\r\n\r\n\r\ndef creation():\r\n    a=fichier()\r\n    c=os.listdir(\"./speeches\")\r\n    for i in range(len(a)):\r\n        b=\"./cleaned/\"+a[i]\r\n        d=\"./speeches/\"+c[i]\r\n        with open(b,\"w\") as f1:\r\n            convertir(d,b)\r\n            del_pon(b)\r\ncreation()\r\n# enlève les majuscules\r\ndef list_of_files2(directory, extension):\r\n    files_names = []\r\n    for filename in os.listdir(directory):\r\n        if filename.endswith(extension):\r\n            files_names.append(filename)\r\n    return files_names\r\n\r\ndirectory = \"./cleaned\"\r\nfiles_names2 = list_of_files2(directory, \"txt\")\r\nprint (files_names2)\r\n\r\ndef tf(f1):\r\n    with open(f1,\"r\",encoding=\"utf-8\") as f:\r\n        d={}\r\n        a=f.readlines()\r\n        b=[]\r\n        for i in range(len(a)):\r\n            j = 0\r\n            while j<len(a[i]):\r\n                c=\"\"\r\n                while a[i][j]!=\" \" and j<len(a[i])-1:\r\n                    c+=a[i][j]\r\n                    j += 1\r\n                b.append(c)\r\n                j+=1\r\n    for i in range(len(b)):\r\n        if b[i] not in d:\r\n            d[b[i]]=1\r\n        else:\r\n            d[b[i]]+=1\r\n    return d\r\n#calcul le score TF\r\ndef test_tf():\r\n    a=0\r\n    b=files_names2\r\n    for i in range(len(files_names2)):\r\n        print(tf(\"./cleaned/\" + files_names2[i]))\r\ntest_tf()\r\ndef idf():\r\n    for i in range(\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision e6dd9cc0c23e2e61810471a9baeec915a651939e)
+++ b/main.py	(date 1700734073812)
@@ -133,11 +133,27 @@
             d[b[i]]+=1
     return d
 #calcul le score TF
+def test_tf():
+    a=0
+    b=files_names2
+    for i in range(len(files_names2)):
+        print(tf("./cleaned/" + files_names2[i]))
+#parcours tous les fichiers et applique la fonction tf
+
 def test_tf():
     a=0
     b=files_names2
     for i in range(len(files_names2)):
         print(tf("./cleaned/" + files_names2[i]))
 test_tf()
-def idf():
-    for i in range(
+
+def idf(mot):
+    c = 0
+    a = test_tf()
+    for i in range(len(a)):
+        if mot in a[i] :
+            c += 1
+    c = math.log(len(a)/c, 10)
+    return c
+
+print(idf("le"))
